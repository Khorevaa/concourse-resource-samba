#!/usr/bin/env bash

# source /opt/resource/lib/log
# source /opt/resource/lib/crypto
# source /opt/resource/lib/net

# set_log_prefix "resource/check"
# log "start"

# SCRIPT_INPUT='/tmp/input'
# cat > $SCRIPT_INPUT <&0 # STDIN params

# MANIFEST_PATH=$(mktemp /tmp/resource-samba.manifest.XXXXXX)
# ARCHIVE_PATH=$(mktemp /tmp/resource-samba.archive.XXXXXX)
# VERSION=$(jq -r '.version.ref // ""' < $SCRIPT_INPUT)
# SMB_SERVER=$(jq -r '.source.server // ""' < $SCRIPT_INPUT)
# SMB_SHARE=$(jq -r '.source.share // ""' < $SCRIPT_INPUT)
# SMB_PATH=$(jq -r '.source.path // ""' < $SCRIPT_INPUT)
# SMB_USER=$(jq -r '.source.user // ""' < $SCRIPT_INPUT)
# SMB_PASSWORD=$(jq -r '.source.password // ""' < $SCRIPT_INPUT)

# log "build" "src_dir: " $SRC_DIR
# log "build" "build_id: " $BUILD_ID
# log "build" "build_name: " $BUILD_NAME
# log "build" "build_job_name: " $BUILD_JOB_NAME
# log "build" "build_pipeline_name: " $BUILD_PIPELINE_NAME
# log "build" "atc_external_url: " $ATC_EXTERNAL_URL

# log "status" "    version:" $VERSION
# log "status" "     server:" $SMB_SERVER
# log "status" "      share:" $SMB_SHARE
# log "status" "       path:" $SMB_PATH
# log "status" "    archive:" $ARCHIVE_PATH
# log "status" "       user:" $SMB_USER
# log "status" "   password:" $SMB_PASSWORD


# #
# # Validation
# #
# [ -n "$VERSION" ] || abort "ERROR Version specifiation $VERSION invalid!"

# #
# # Check Resource
# # - fetch remote files as archive
# smb_get \
# 	$SMB_SERVER \
# 	$SMB_SHARE \
# 	$SMB_PATH \
# 	$ARCHIVE_PATH \
# 	$SMB_USER \
# 	$SMB_PASSWORD

# #
# # Response
# # - generate hash from file binary contents
# HASH=$(cat $ARCHIVE_PATH | generate_hash | format_hash)
# if [ "${HASH}" = "${VERSION}" ]; then
#   break
# else
# 	success "{ \"ref\": \"${HASH}\" }"
# fi

