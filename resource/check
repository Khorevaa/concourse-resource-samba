#!/usr/bin/env bash

source ./lib/log
source ./lib/smb

set_log_prefix "resource/check"

SCRIPT_INPUT='/tmp/input'
cat > $SCRIPT_INPUT <&0 # STDIN params

MANIFEST_PATH=$(mktemp /mnt/storage/resource-samba.manifest.XXXXXX)
ARCHIVE_PATH=$(mktemp /mnt/storage/resource-samba.archive.XXXXXX)
VERSION=$(jq -r '.version.ref // ""' < $SCRIPT_INPUT)
SMB_SERVER=$(jq -r '.source.server // ""' < $SCRIPT_INPUT)
SMB_SHARE=$(jq -r '.source.share // ""' < $SCRIPT_INPUT)
SMB_MANIFEST=$(jq -r '.source.manifest[] // []' < $SCRIPT_INPUT)
SMB_USER=$(jq -r '.source.user // ""' < $SCRIPT_INPUT)
SMB_PASSWORD=$(jq -r '.source.password // ""' < $SCRIPT_INPUT)

log "status" "   manifest:" $MANIFEST_PATH
log "status" "    archive:" $ARCHIVE_PATH
log "status" "    version:" $VERSION
log "status" "       user:" $SMB_USER
log "status" "   password:" $SMB_PASSWORD
log "status" "     server:" $SMB_SERVER
log "status" "      share:" $SMB_SHARE
log "status" "   manifest:" $SMB_MANIFEST
log "status" "    pattern:" $SMB_PATTERN

#
# Validation
#
[ -n "$VERSION" ] || abort "ERROR Version specifiation $VERSION invalid!"

#
# Check Resource
# - dump manifest array to file
printf "%s\n" "${SMB_MANIFEST[@]}" > $MANIFEST_PATH
# - fetch remote files as archive
smb_get $SMB_SERVER $SMB_SHARE $ARCHIVE_PATH $MANIFEST_PATH $SMB_USER $SMB_PASSWORD

#
# Response
# - generate hash
HASH=$(hash $ARCHIVE_PATH)
RESPONSE="{ \"ref\": \"$HASH\" }"

if [ "$HASH" = "$VERSION" ]; then
  break
fi

if [ "$HASH" != "$VERSION" ]; then
	success $RESPONSE
fi

