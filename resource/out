#!/usr/bin/env bash

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/lib/log
source $(dirname $0)/lib/crypto
source $(dirname $0)/lib/net

set_log_prefix "resource/out"
log "start"

src=$1
[ -z "$src" ] && abort "usage: ${0} <path/to/source>"

# for jq
PATH=/usr/local/bin:$PATH

version="${BUILD_PIPELINE_NAME}-${BUILD_ID}"

request=$(mktemp /tmp/resource-out-request.XXXXXX)
touch $request

in_archive_container=$(mktemp -d /tmp/resource-out-archive.XXXXXX)
in_archive=$in_archive_container/$version
mkdir $in_archive

###
# The request from Concourse
cat > $request <&0
log "request" $(jq -C '.' < $request)

resource_connection=$(jq -r '"//\(.source.server)/\(.source.share)"' < $request)
resource_path=$(jq -r '.source.path // ""' < $request)
resource_user=$(jq -r '.source.user // ""' < $request)
resource_password=$(jq -r '.source.password // ""' < $request)

in_path=$src/$(jq -r '.params.path // "."' < $request)

log "concourse.source" $src

log "resource.connection" $connection
log "resource.path" $path
log "resource.user" $user
log "in.path" $in_path
log "in.archive" $in_archive

###
# Generate the archive
#
log "to-upload" $(tree $in_path)
cd $in_path && \
	cp -a ./* $in_archive && \
	tar C $in_archive_container -cf $in_archive .

###
# Put the resources
# - build network command
log "connection" $connection
command=$(smb_put \
	$resource_connection \
	$resource_path \
	$in_archive \
	$resource_user \
	$resource_password
)
# - execute network command
eval $command 2>&1

success "done"
