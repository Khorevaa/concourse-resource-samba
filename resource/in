#!/usr/bin/env bash

set -e              # Willexit immediate if command exits with non-zero status
set -u              # Will print message if variable not set,
#set -x             # Prints the shell commands +
set -o pipefail     # Fail on a pipline like cmd1 | cmd2 | cmd3, rather then wait

exec 3>&1           # Make stdout available as fd 3 for the result
exec 1>&2           # Redirect all output to stderr for logging

echo "IN (FETCH THE RESOURCE)"
echo ""

source $(dirname $0)/lib/log
source $(dirname $0)/lib/crypto
source $(dirname $0)/lib/net

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi


# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp -d /tmp/resource-in.XXXXXX)
request=$payload/request
response=$payload/response
archive=$payload/archive
touch $request
touch $response
touch $archive

###
# The request from Concourse
cat > $request <&0
#log "request"

connection=$(jq -r '"//\(.source.server)/\(.source.share)"' < $request)
directory=$(jq -r '.source.directory // ""' < $request)
user=$(jq -r '.source.user // ""' < $request)
password=$(jq -r '.source.password // ""' < $request)
path=$(jq -r '.source.path // ""' < $request)

###
# Get the resources
# - build network command
#log "connection" $connection
command=$(smb_get \
	$connection \
	$directory \
	$path \
	$archive \
	$user \
	$password )
#log "command" $command
# - execute network command
eval $command 2>&1

###
# Examine retrieved resources
# - generate fingerprint of archive contents
hash=$(cat $archive | generate_hash | format_hash)
# - unpack to temp area
mkdir $payload/tmp
tar -C $payload/tmp -xvf $archive "./${directory}/${path}"
# - move it out to the place concourse expects it to be
mv -f $payload/tmp/$directory/$path $destination

# OUTPUT **************************************************************************************
json_output='{
    "version": { "ref": "'${hash}'" }
}'

#echo ".json output is $json_output"

# -n don't read any input at all.  Construct froms scratch.
jq -n "$json_output" >&3

